set number relativenumber
set autoindent smartindent
set showcmd
set tabstop=2
set shiftwidth=2
set scrolloff=2
set sidescrolloff=2
set softtabstop=2
set nojoinspaces
set backspace=indent,eol,start
set showmatch
set hlsearch
set incsearch
set ignorecase smartcase
set ruler
set expandtab
set smarttab
set encoding=utf-8
set timeoutlen=500
set ttimeoutlen=100
set nocompatible
set autoread
set autowrite
set hidden
set showmode
syntax on
filetype plugin indent on

" for i in range(97,122)
  " let c = nr2char(i)
  " execute "map \e".c." <M-".c.">"
  " execute "map! \e".c." <M-".c.">"
" endfor

" Key mapping
nnoremap K :grep! -F '<c-r><c-w>' .<cr>:cwindow<cr>
vnoremap K y:grep! -F '<c-r>0' .<cr>:cwindow<cr>

if executable('ag')
  set grepprg=ag\ --vimgrep\ --smart-case\ 2>/dev/null
elseif executable('rg')
  set grepprg=rg\ --vimgrep\ --smart-case\ 2>/dev/null
else
  nnoremap K :grep! -srF '<c-r><c-w>' .<cr>:cwindow<cr>
  vnoremap K y:grep! -srF '<c-r>0' .<cr>:cwindow<cr>
endif

if &diff
  nmap [ [c
  nmap ] ]c
  nmap <c-F5> :diffupdate<cr>
  set background=dark
  colorscheme evening
endif

inoremap <s-cr> <c-o>o
" inoremap <s-a-cr> <esc>O
inoremap <c-a> <c-o>^
inoremap <c-f> <c-o>^
inoremap <c-e> <c-o>$
inoremap <c-k> <c-o>D
inoremap <s-tab> <c-o><<
inoremap <c-]> <c-o>>>
inoremap <c-l> <c-o>==
inoremap jj <esc>
noremap <F5> :redraw<cr>

cnoremap w!! w !sudo tee > /dev/null %
nnoremap <space>q :qa!<cr>
nnoremap <space>z :w !sudo tee % > /dev/null<cr>
nnoremap <space>zz :w !sudo tee % > /dev/null<cr>L:qa!<cr>

nnoremap [0 :cfirst<cr>
nnoremap ]0 :clast<cr>
nnoremap [o :copen<cr>
nnoremap ]o :cclose<cr>
nnoremap [c :cprevious<cr>
nnoremap ]c :cnext<cr>
nnoremap [9 :lfirst<cr>
nnoremap ]9 :llast<cr>
nnoremap [q :lopen<cr>
nnoremap ]q :lclose<cr>
nnoremap [l :lprevious<cr>
nnoremap ]l :lnext<cr>
nmap <tab> <c-w>w

vnoremap x "_x
vnoremap s "_s

map <leader>p "*p
map <leader>P "*P
map <space>p "*p
map <space>P "*P
map <leader>y "*y
map <space>y "*y
map Y "*y
map zp "0p
map zP "0P
vmap gy y`>
vmap gY "*y`>
map Q gq
map U <c-r>

nnoremap gz `[v`]
vnoremap < <gv
vnoremap > >gv
vnoremap p pgvy
vnoremap v ^$h
vnoremap * y/\V<c-r>0<cr>
vnoremap # y?\V<c-r>0<cr>
nnoremap e 3<c-y>
nnoremap y 3<c-e>
inoremap e <c-o><c-y>
inoremap y i<c-o><c-e>

nnoremap <c-j> <esc>:bnext<cr>
nnoremap <c-k> <esc>:bprevious<cr>

nnoremap <leader>d <esc>:bdelete<cr>
nnoremap <space>d <esc>:bdelete<cr>

noremap <F8> :let @/ = ""<cr>
nnoremap <leader><cr> :nohlsearch<cr>
nnoremap <space><cr> :nohlsearch<cr>

nnoremap <Up> gk
nnoremap <Down> gj

nnoremap <leader>sw "_yiw:s/\(\%#\w\+\)\(\W\+\)\(\w\+\)/\3\2\1/<cr><c-o>
